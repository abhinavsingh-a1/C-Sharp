using System;  
  
namespace Delegates  
{  
    // Delegate Definition  
    public delegate int operation(int x, int y);  
         
    class Program  
    {  
        // Method that is passes as an Argument  
        // It has same signature as Delegates   
        static int Addition(int a, int b)  
        {  
            return a + b;  
        }  
  
        static void Main(string[] args)  
        {  
            // Delegate instantiation  
            operation obj = new operation(Program.Addition);  
   
            // output  
            Console.WriteLine("Addition is={0}",obj(23,27));   
            Console.ReadLine();    
        }  
    }  
}  

Here, we are defining the delegate as a delegate type. The important point to remember is that the signature of the function reference by the delegate must match the delegate signature as:

// Delegate Definition  
public delegate int operation(int x, int y);  
Notice the format of the operation delegate type declaration; it specifies that the operation object can permit any method taking two integers and returning an integer. When you want to insert the target methods to a given delegate object, simply pass in the name of the method to the delegate constructor as: 
// Delegate instantiation  
operation obj = new operation(Program.Addition);  
At this point, you are able to invoke the member pointed to using a direct function invocation as:
Console.WriteLine("Addition is={0}",obj(23,27));   
Finally, when the delegate is no longer required, set the delegate instance to null.
